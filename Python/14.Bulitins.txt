A.collections
collections是Python内建的一个集合模块，提供了许多有用的集合类

1.namedtuple
namedtuple是一个函数，它用来创建一个自定义的tuple对象，并且规定了tuple元素的个数，并可以用属性而不是索引来引用tuple的某个元素
from collections import namedtuple
Point = namedtuple('Point', ['x', 'y'])
p = Point(1, 2)
print p.x
print p.y
print isinstance(p, Point)
print isinstance(p, tuple)
1
2
True
True

如果要用坐标和半径表示一个圆，也可以用namedtuple定义：
Circle = namedtuple('Circle', ['x', 'y', 'r'])    # namedtuple('名称', [属性list])

2.deque
使用list存储数据时，按索引访问元素很快，但是插入和删除元素就很慢了，因为list是线性存储，数据量大的时候，插入和删除效率很低,deque除了实现list的append()和pop()外，还支持appendleft()和popleft()，这样就可以非常高效地往头部添加或删除元素
from collections import deque
q = deque (['a', 'b', 'c'])
q.append('x')
q.appendleft('y')
print q
deque(['y', 'a', 'b', 'c', 'x'])

3.defaultdict
使用dict时，如果引用的Key不存在，就会抛出KeyError.如果希望key不存在时，返回一个默认值，就可以用defaultdict
from collections import defaultdict
dd = defaultdict(lambda : 'N/A')
dd['key1'] = 'abc'
print dd['key1']
print dd['key2']
abc
N/A
注意默认值是调用函数返回的，而函数在创建defaultdict对象时传入.
除了在Key不存在时返回默认值，defaultdict的其他行为跟dict是完全一样的

4.OrderedDict
使用dict时，Key是无序的.在对dict做迭代时，我们无法确定Key的顺序,如果要保持Key的顺序，可以用OrderedDict
from collections import OrderedDict
d = dict([('a', 1), ('b', 2), ('c', 3)])
print d
od = OrderedDict([('a', 1), ('b', 2), ('c', 3)])
print od
{'a': 1, 'c': 3, 'b': 2}
OrderedDict([('a', 1), ('b', 2), ('c', 3)])

OrderedDict的Key会按照插入的顺序排列，不是Key本身排序
from collections import OrderedDict
od = OrderedDict()
od['z'] = 1
od['y'] = 2
od['x'] = 3
print od.keys()
['z', 'y', 'x']

OrderedDict可以实现一个FIFO（先进先出）的dict，当容量超出限制时，先删除最早添加的Key
from collections import OrderedDict
class LastUpdateOrderedDict(OrderedDict):
	def __init__(self, capacity):
		super(LastUpdateOrderedDict, self).__init__()
		self.capacity = capacity
	def __setitem__(self, key, value):
		containsKey = 1 if key in self else 0
		if len(self) - containsKey >= self._capacity:
			last = self.popite(last = False)
			print 'remove:', last
		if containsKey:
			del self [key]
			print ' set:', (key, value)
		else:
			print 'add:', (key, value)
		OrderedDict.__setitem__(self, key, value)
			
5.Counter
Counter是一个简单的计数器,Counter实际上也是dict的一个子类
from collections import Counter
c = Counter()
for ch in 'programming':
	c[ch] = c[ch] + 1
print c
Counter({'g': 2, 'm': 2, 'r': 2, 'a': 1, 'i': 1, 'o': 1, 'n': 1, 'p': 1})

B.base64
Base64是一种用64个字符来表示任意二进制数据的方法
Base64原理:准备一个包含64个字符的数组,对二进制数据进行处理，每3个字节一组，一共是3x8=24bit，划为4组，每组正好6个bit,得到4个数字作为索引，然后查表，获得相应的4个字符，就是编码后的字符串,Base64编码会把3字节的二进制数据编码为4字节的文本数据，长度增加33%，好处是编码后的文本数据可以在邮件正文、网页等直接显示.
如果要编码的二进制数据不是3的倍数，最后会剩下1个或2个字节怎么办？Base64用\x00字节在末尾补足后，再在编码的末尾加上1个或2个=号，表示补了多少字节，解码的时候，会自动去掉
import base64
print base64.b64encode('binary\x00string')
print base64.b64decode('YmluYXJ5AHN0cmluZw==')
YmluYXJ5AHN0cmluZw==
binarystring    #教程显示为binary\x00string

由于标准的Base64编码后可能出现字符+和/，在URL中就不能直接作为参数，所以又有一种"url safe"的base64编码，其实就是把字符+和/分别变成-和_
import base64
print base64.b64encode('i\xb7\x1d\xfb\xef\xff')
print base64.urlsafe_b64encode('i\xb7\x1d\xfb\xef\xff')
print base64.urlsafe_b64decode('abcd--__')    #终端解释器中才能正确显示，脚本运行乱码
abcd++//
abcd--__
i\xb7\x1d\xfb\xef\xff

Base64是一种通过查表的编码方法，不能用于加密，即使使用自定义的编码表也不行
Base64适用于小段内容的编码，比如数字证书签名、Cookie的内容等
由于=字符也可能出现在Base64编码中，但=用在URL、Cookie里面会造成歧义，所以，很多Base64编码后会把=去掉
# 标准Base64:
'abcd' -> 'YWJjZA=='
# 自动去掉=:
'abcd' -> 'YWJjZA'
去掉=后怎么解码呢？因为Base64是把3个字节变为4个字节，所以，Base64编码的长度永远是4的倍数，因此，需要加上=把Base64字符串的长度变为4的倍数，就可以正常解码了

能处理去掉=的base64解码函数
>>> base64.b64decode('YWJjZA==')
'abcd'
>>> base64.b64decode('YWJjZA')
Traceback (most recent call last):
  ...
TypeError: Incorrect padding
>>> safe_b64decode('YWJjZA')
'abcd'

C.struct
把一个32位无符号整数变成字节，也就是4个长度的str
>>> n = 10240099
>>> b1 = chr((n & 0xff000000) >> 24)
>>> b2 = chr((n & 0xff0000) >> 16)
>>> b3 = chr((n & 0xff00) >> 8)
>>> b4 = chr(n & 0xff)
>>> s = b1 + b2 + b3 +b4
>>> s
'\x00\x9c@c'

Python提供了一个struct模块来解决str和其他二进制数据类型的转换
>>> import struct
>>> struct.pack('>I', 10240099)    #pack的第一个参数是处理指令，'>I'：，>表示字节顺序是big-endian，也就是网络序，I表示4字节无符号整数，后面的参数个数要和处理指令一致
'\x00\x9c@c'
>>> struct.unpack('>IH', '\xf0\xf0\xf0\xf0\x80\x80')    #>IH的说明，后面的str依次变为I：4字节无符号整数和H：2字节无符号整数
(4042322160, 32896)

D.hashlib
摘要算法：摘要算法又称哈希算法、散列算法.它通过一个函数，把任意长度的数据转换为一个长度固定的数据串（通常用16进制的字符串表示）
摘要算法就是通过摘要函数f()对任意长度的数据data计算出固定长度的摘要digest，目的是为了发现原始数据是否被人篡改过.
摘要算法之所以能指出数据是否被篡改过，就是因为摘要函数是一个单向函数，计算f(data)很容易，但通过digest反推data却非常困难.而且，对原始数据做一个bit的修改，都会导致计算出的摘要完全不同

import hashlib    #MD5是最常见的摘要算法，速度很快，生成结果是固定的128 bit字节，通常用一个32位的16进制字符串表示
md5 = hashlib.md5()
md5.update('how to use md5 in python hashlib')    #若数据量较大，可分割，如md5.update('how to use md5 in ')\md5.update('python hashlib?')
print md5.hexdigest()
846014c3556d79e878be15fde5426e8a

import hashlib    #SHA1的结果是160 bit字节，通常用一个40位的16进制字符串表示
sha1 = hashlib.sha1()
sha1.update('how to use sha1 in python hashlib')
print sha1.hexdigest()
e9282e41aaf5ef53fd4ca3c191ed1e2546dbf3f2

比SHA1更安全的算法是SHA256和SHA512，不过越安全的算法越慢，而且摘要长度更长

应用：
正确的保存口令的方式是不存储用户的明文口令，而是存储用户口令的摘要，比如MD5：

username | password
---------+---------------------------------
michael  | e10adc3949ba59abbe56e057f20f883e
bob      | 878ef96e86145580c38c87f0410ad153
alice    | 99b1c2188db85afee403b1536010c2c9

由于常用口令的MD5值很容易被计算出来，所以，要确保存储的用户口令不是那些已经被计算出来的常用口令的MD5，这一方法通过对原始口令加一个复杂字符串来实现，俗称“加盐”：
def calc_md5(password):
    return get_md5(password + 'the-Salt')
经过Salt处理的MD5口令，只要Salt不被黑客知道，即使用户输入简单口令，也很难通过MD5反推明文口令

E.itertools
itertools提供了非常有用的用于操作迭代对象的函数

import itertools 
natuals = itertools.count(1)    #count()无限迭代，停不下来
for n in natuals:
	print n
1
2
3
....
count()会创建一个无限的迭代器，所以上述代码会打印出自然数序列，根本停不下来，只能按Ctrl+C退出

import itertools 
cs = itertools.cycle('ABC')    #cycle()会把传入的一个序列无限重复下去
for c in cs:
	print c
A
B
C
A
B
C
....

import itertools 
ns = itertools.repeat('A', 10)    #repeat()负责把一个元素无限重复下去，不过如果提供第二个参数就可以限定重复次数
for n in ns:
	print n
A
A
A
A
A
A
A
A
A
A

无限序列虽然可以无限迭代下去，但是通常我们会通过takewhile()等函数根据条件判断来截取出一个有限的序列
import itertools 
natuals = itertools.count(1)
ns = itertools.takewhile(lambda x : x <= 10, natuals)
for n in ns:
	print n
1
2
3
4
5
6
7
8
9
10

import itertools
for key, group in itertools.groupby('AAABBBCCCAAA'):    #groupby()把迭代器中相邻的重复元素挑出来放在一起
	print key, list(group)
A ['A', 'A', 'A']
B ['B', 'B', 'B']
C ['C', 'C', 'C']
A ['A', 'A', 'A']

import itertools
for c in chain('ABC', 'XYZ'):    #chain()可以把一组迭代对象串联起来，形成一个更大的迭代器,没实现
	print c
'A' 'B' 'C' 'X' 'Y' 'Z'

import itertools
for key, group in itertools.groupby('AaaBBbcCAAa', lambda c : c.upper()):    #忽略大小写
	print key, list(group)
A ['A', 'a', 'a']
B ['B', 'B', 'b']
C ['c', 'C']
A ['A', 'A', 'a']

import itertools
for x in itertools.imap(lambda x, y: x*y, [10, 20, 30], itertools.count(1)):    #imap()和map()的区别，imap()可以作用于无穷序列，并且，
                                                                                  如果两个序列的长度不一致，以短的那个为准
	print x
10
40
90

>>> r = map(lambda x: x*x, [1, 2, 3])    #imap()返回一个迭代对象，而map()返回list.当你调用map()时，已经计算完毕
>>> r
[1, 4, 9]
>>> r = itertools.imap(lambda x: x*x, [1, 2, 3])    #调用imap()时，并没有进行任何计算,需要用for...in...迭代出来
>>> r
<itertools.imap object at 0x103d3ff90>

import itertools
r = itertools.imap(lambda x: x*x, itertools.count(1))
for n in itertools.takewhile(lambda x: x<100, r):
	print n
1
4
9
16
25
36
49
64
81

