A.TCP/IP简介
通信的时候，双方必须知道对方的标识，好比发邮件必须知道对方的邮件地址.互联网上每个计算机的唯一标识就是IP地址，类似123.123.123.123.如果一台计算机同时接入到两个或更多的网络，比如路由器，它就会有两个或多个IP地址，所以，IP地址对应的实际上是计算机的网络接口，通常是网卡.
IP协议负责把数据从一台计算机通过网络发送到另一台计算机.数据被分割成一小块一小块，然后通过IP包发送出去.由于互联网链路复杂，两台计算机之间经常有多条线路，因此，路由器就负责决定如何把一个IP包转发出去.IP包的特点是按块发送，途径多个路由，但不保证能到达，也不保证顺序到达.
TCP协议则是建立在IP协议之上的.TCP协议负责在两台计算机之间建立可靠连接，保证数据包按顺序到达.TCP协议会通过握手建立连接，然后，对每个IP包编号，确保对方按顺序收到，如果包丢掉了，就自动重发.
一个IP包除了包含要传输的数据外，还包含源IP地址和目标IP地址，源端口和目标端口.
端口有什么作用？在两台计算机通信时，只发IP地址是不够的，因为同一台计算机上跑着多个网络程序.一个IP包来了之后，到底是交给浏览器还是QQ，就需要端口号来区分.每个网络程序都向操作系统申请唯一的端口号，这样，两个进程在两台计算机之间建立网络连接就需要各自的IP地址和各自的端口号.
一个进程也可能同时与多个计算机建立链接，因此它会申请很多端口.

B.TCP编程
Socket是网络编程的一个抽象概念，用一个Socket表示“打开了一个网络链接”，而打开一个Socket需要知道目标计算机的IP地址和端口号，再指定协议类型即可.

1.客户端
大多数连接都是可靠的TCP连接.创建TCP连接时，主动发起连接的叫客户端，被动响应连接的叫服务器.

import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)   #创建一个socket 
#AF_INET指定使用IPv4协议,要用更先进的IPv6，就指定为AF_INET6,SOCK_STREAM指定使用面向流的TCP协议
s.connect(('www.sina.com.cn', 80))     # 建立连接,换成zhihu后访问被禁止
#80端口是Web服务的标准端口,SMTP服务是25端口，FTP服务是21端口，等等.端口号小于1024的是Internet标准服务的端口，端口号大于1024的，可以任意使用.
s.send('GET / HTTP/1.1\r\nHost: www.sina.com.cn\r\nConnection: close\r\n\r\n')    #发送数据

buffer = []    #接收数据:
while True:
	d = s.recv(1024)    #调用recv(max)方法，一次最多接收指定的字节数
	if d:
		buffer.append(d)
	else:
		break
data = ' '.join(buffer)

s.close()    # 关闭连接

header, html = data.split('\r\n\r\n', 1)
print header
with open('zhihu.html', 'wb') as f :
	f.write(html)

HTTP/1.1 200 OK
Server: nginx
Date: Tue, 11 Aug 2015 04:08:01 GMT
Content-Type: text/html
Last-Modified: Tue, 11 Aug 2015 04:07:38 GMT
Vary: Accept-Encoding
Expires: Tue, 11 Aug 2015 04:09:01 GMT
Cache-Control: max-age=60
X-Powered-By: schi_v1.02
Age: 36
Content-Length: 622087
X-Cache: HIT from localhost
Connection: close

打开桌面的sina.html会出现sina首页

B.服务器
服务器进程首先要绑定一个端口并监听来自其他客户端的连接.如果某个客户端连接过来了，服务器就与该客户端建立Socket连接，随后的通信就靠这个Socket连接了
所以，服务器会打开固定端口（比如80）监听，每来一个客户端连接，就创建该Socket连接.由于服务器会有大量来自客户端的连接，所以，服务器要能够区分一个Socket连接是和哪个客户端绑定的.一个Socket依赖4项：服务器地址、服务器端口、客户端地址、客户端端口来唯一确定一个Socket
但是服务器还需要同时响应多个客户端的请求，所以，每个连接都需要一个新的进程或者新的线程来处理，否则，服务器一次就只能服务一个客户端了.

import socket , time, threading     #服务器端
def tcplink(sock, addr):
	print 'Accept new connection from %s:%s...' % addr
	sock.send('Welcome!')
	while True:
		data = sock.recv(1024)
		time.sleep(1)
		if data == 'exit' or not data:
			break
		sock.send('Hello, %s!' % data)
	sock.close()
	print 'Connection from %s:%s clsoed.' % addr

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(('127.0.0.1', 9999))
s.listen(5)
print 'Waiting for connection...'
while True:
	sock, addr = s.accept()
	t = threading.Thread(target = tcplink, args = (sock, addr))
	t.start()

import socket    #客户端
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('127.0.0.1', 9999))
print s.recv(1024)
for data in ['Michael', 'Tracy', 'Sarah']:
	s.send(data)
	print s.recv(1024)
s.send('exit')
s.close()

服务器端运行：
Waiting for connection...
Accept new connection from 127.0.0.1:35985...
Connection from 127.0.0.1:35985 clsoed.

客户端运行：
Welcome!
Hello, Michael!
Hello, Tracy!
Hello, Sarah!

C.UDP编程
TCP是建立可靠连接，并且通信双方都可以以流的形式发送数据.相对TCP，UDP则是面向无连接的协议.
使用UDP协议时，不需要建立连接，只需要知道对方的IP地址和端口号，就可以直接发数据包.但是，能不能到达就不知道了.
虽然用UDP传输数据不可靠，但它的优点是和TCP比，速度快，对于不要求可靠到达的数据，就可以使用UDP协议.

服务器端：
import socket, time
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)    #SOCK_DGRAM指定了这个Socket的类型是UDP
s.bind(('127.0.0.1', 9999))    #UDP的9999端口与TCP的9999端口可以各自绑定，绑定端口和TCP一样，但是不需要调用listen()方法，而是直接接收来自任何客户端的数据
print 'Bind UDP  on 9999...'
while True:
	data, addr = s.recvfrom(1024)
	print 'Received from %s:%s.' % addr
	s.sendto('Hello , %s!' % data, addr)

客户端：
import socket
s =socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
for data in ['Michael', 'Tracy', 'Sarah']:
	s.sendto(data, ('127.0.0.1', 9999))    #不需要调用connect()，直接通过sendto()给服务器发数据
	print s.recv(1024)
s.close()


服务器端运行：
Bind UDP  on 9999...
Received from 127.0.0.1:42136.
Received from 127.0.0.1:42136.
Received from 127.0.0.1:42136.

客户端运行：
Hello , Michael!
Hello , Tracy!
Hello , Sarah!


