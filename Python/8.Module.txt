A.模块
一个py文件就是一个module
一个abc.py的文件就是一个名字叫abc的模块，一个xyz.py的文件就是一个名字叫xyz的模块
引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突.将abc.py&xyz.py文件添加到包mycomyany中，abc.py模块的名字就变成了mycompany.abc，类似的，xyz.py的模块名变成了mycompany.xyz
每一个包目录下面都会有一个__init__.py的文件，这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包.__init__.py可以是空文件，也可以有Python代码，因为__init__.py本身就是一个模块，而它的模块名就是mycompany

B.使用模块
1.模块的应用
'a test module'
__author__ = 'SETSUNA'
import sys
def test():
	args = sys.argv    
	if len(args) == 1:
		print ('Hello World!')
	elif len(args) == 2:
		print('Hello, %s!' % args[1])
	else:
		print('Too many arguments!')		
if __name__ == '__main__':
	test()
python hello.py
Hello World!
python hello.py SETSUNA
Hello,SETSUNA
python hello.py SETSUNA SEIN
Too many arguments!

#关于上面程序的一些补充
#sys模块有一个argv变量，用list存储了命令行的所有参数.argv至少有一个元素，因为第一个参数永远是该.py文件的名称，例如：运行python hello.py获得的sys.argv就是['hello.py']；运行python hello.py SETSUNA获得的sys.argv就是['hello.py', 'SETSUNA'].
#在命令行运行hello模块文件时，Python解释器把一个特殊变量__name__置为__main__，而如果在其他地方导入该hello模块时，if判断将失败，因此，这种if测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试.
[SETSUNA@localhost Desktop]$ python
Python 2.7.5 (default, Jun 24 2015, 00:41:19) 
[GCC 4.8.3 20140911 (Red Hat 4.8.3-9)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import hello
>>> hello.test
<function test at 0x7a0d70>
>>> hello.test()
Hello World!

2.别名
导入模块时，还可以使用别名，这样，可以在运行时根据当前环境选择最合适的模块。比如Python标准库一般会提供StringIO和cStringIO两个库，这两个库的接口和功能是一样的，但是cStringIO是C写的，速度更快：
try:
	import cStringIO as StringIO    #此处StringIO别名
except ImportError:
	import StringIO

还有类似simplejson这样的库：
try:
	import json
except ImportError:
	import simolejson as json

由于Python是动态语言，函数签名一致接口就一样，因此，无论导入哪个模块后续代码都能正常工作

3.作用域
正常的函数和变量名是公开的（public），可以被直接引用，比如：abc，x123，PI等
类似__xxx__这样的变量是特殊变量，可以被直接引用，但是有特殊用途，比如上面的__author__，__name__就是特殊变量，hello模块定义的文档注释也可以用特殊变量__doc__访问，我们自己的变量一般不要用这种变量名
类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，__abc等
def _private_1(name):
	return 'Hello, %s' % name

def _private_2(name):
	return 'Hello, %s' % name

def greeting(name):
	if len(name) > 3 :
		return _private_1(name)
	else :
		return _private_2(name)
#在模块里公开greeting()函数，而把内部逻辑用private函数隐藏起来了，这样，调用greeting()函数不用关心内部的private函数细节，这也是一种非常有用的代码封装和抽象的方法，即：
外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public.

C.安装第三方模块
安装第三方模块，是通过setuptools这个工具完成的.Python有两个封装了setuptools的包管理工具：easy_install和pip。目前官方推荐使用pip.
pip格式：sudo pip install packages
安装好第三方库后需要设置PYTHONPATH
有三种修改方法，两种临时的，一种永久的
临时的：1.直接命令行中输入:export PYTHONPATH=/usr/lib/python2.7/site-packages/
       2.sudo vim /etc/profile:export PYTHONPATH=/usr/lib/python2.7/site-packages/
永久的：sudo vim /etc/bashrc:export PYTHONPATH=/usr/lib/python2.7/site-packages/
查看路径方式：bash: python --> import sys --> sys.path

以Pillow库为例
>>> from PIL import Image
>>> im = Image.open('1.png')
>>> print im.format , im.size, im.mode
JPEG (1920, 1200) RGB

D.__future__

