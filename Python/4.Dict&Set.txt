A.dict
1.使用键值key-value存储，以花括号创建dict，以大括号查找dict，key必须不可变！
>>> d={'Michael':95,'Bob':75,'Tracy':85}
>>> d['Michael']
95
>>> d['Adam']=67    #添加元素
>>> d['Adam']
67
>>> d['Jack']=90    #一个key对应一个value，多次对一个key放入value，后面的值会把前面的值覆盖掉
>>> d['Jack']
90
>>> d['Jack']=88
>>> d['Jack']
88
>>> 'Thomas' in d    #查找key是否存在（查找方法1）
False
>>> d.get('Thomas')    #若不存在key，则返回NONE——交互式命令下不显示结果，或者自定义的value（查找方法2）
>>> d.get('Thomas',-1)
-1
>>> d.pop('Bob')    #删除key使用pop(key)
75
>>> d
{'Jack': 88, 'Michael': 95, 'Tracy': 85, 'Adam': 67}

2.和list比较，dict有以下几个特点：
查找和插入的速度极快，不会随着key的增加而增加；
需要占用大量的内存，内存浪费多。

而list相反：
查找和插入的时间随着元素的增加而增加；
占用空间小，浪费内存很少。

dict是用空间来换取时间的一种方法。

B.set
set于dict类似，也是一组key的集合，但不存储value，由于key不能重复，所以set中没有重复的key，只能放入不可变元素！
>>> s = set([1,2,3])   #传入的参数[1, 2, 3]是一个list，而显示的set([1, 2, 3])只是告诉你这个set内部有1，2，3这3个元素 
>>> s
set([1, 2, 3])    
>>> s = set([1,1,2,2,3,4])    #重复的key会被自动过滤掉
>>> s
set([1, 2, 3, 4])
>>> s.add(5)    #通过add(key)可添加元素
>>> s
set([1, 2, 3, 4, 5])
>>> s.add(5)    #重复添加不会有效果
>>> s
set([1, 2, 3, 4, 5])
>>> s.remove(5)    #通过remove(key)可移除元素
>>> s
set([1, 2, 3, 4])
>>> s1 = set([1,2,3])    #set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作
>>> s2 = set([2,3,4])
>>> s1 & s2
set([2, 3])
>>> s1 | s2
set([1, 2, 3, 4])

C.不可变对象
1.list是可变对象
>>> a = ['c','b','a']   #list 
>>> a.sort()    #给sort()给list排序
>>> a
['a', 'b', 'c']

2.str是不可变对象
>>> a = 'abc'    #str
>>> a.replace('a','A')
'Abc'    #生成了一个新的字符串
>>> a
'abc'
>>> b = a.replace('a','A')    #直观的表现方式
>>> b
'Abc'

3.a是变量，'abc'是字符串对象！a本身是一个变量，它指向的对象的内容才是'abc'，当调用a.replace('a', 'A')时，实际上调用方法replace是作用在字符串对象'abc'上的，虽然名字叫replace，但却没有改变字符串'abc'的内容。相反，replace方法创建了一个新字符串'Abc'并返回，如果用变量b指向该新字符串，变量a仍指向原有的字符串'abc'，但变量b却指向新字符串'Abc'了









