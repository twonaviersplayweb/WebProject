A.高级特性
L = []
n =1 
while n <= 99:
	L.append(n)
	n = n+2
print L
[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]

B.切片
取一个list或者tuple的前n项值
1.按部就班
>>> L = ['Michael','Sarah','Tracy','Bob','Jack']    
>>> [L[0],L[1],L[2]]
['Michael', 'Sarah', 'Tracy']

2.循环
L = ['Michael','Sarah','Tracy','Bob','Jack']
r = []
n = 3
for i in range(n):
	r.append(L[i])
print r
['Michael', 'Sarah', 'Tracy']

3.切片
L = ['Michael','Sarah','Tracy','Bob','Jack']
print L[0:3]    #L[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3。即索引0，1，2，正好是3个元素。
print L[:3]    #第一个索引是0，可以省略
print L[1:3]
print L[-1:-2]    #L[-1]取倒数第一个元素
print L[-2:]
['Michael', 'Sarah', 'Tracy']
['Michael', 'Sarah', 'Tracy']
['Sarah', 'Tracy']
[]
['Bob', 'Jack']

4.list切片
L = range(100)
print L
print L[:10]
print L[-10:]
print L[10:20]
print L[:10:2]    #前10个数，每两个取一个
print L[::5]    #所有数，每5个取一个
print L[:]    #只写[:]就可以原样复制一个list
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
[0, 2, 4, 6, 8]
[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]

5.tuple和字符串切片
>>> (0, 1, 2, 3, 4, 5)[:3]    #tuple切片后任为tuple
(0, 1, 2)
>>> 'ABCDEFG'[:3]    #字符串可看成一种list
'ABC'
>>> 'ABCDEFG'[::2]
'ACEG'

C.迭代
给定一个list或tuple，可以通过for循环来遍历这个list或tuple，这种遍历被称为迭代（Iteration）
在Python中，迭代是通过for ... in来完成的
1.dict的迭代
d = {'a' : 1, 'b' : 2, 'c' : 3}    
for key in d:    #迭代key
	print key
for value in d.itervalues():    #迭代value
	print value
for k, v in d.iteritems():    #迭代key&value
	print k ,v
a
c
b
1
3
2
a 1
c 3
b 2

2.字符串的迭代
for ch in 'ABC':
	print ch
A
B
C

3.判断一个对象是可迭代对象呢？方法是通过collections模块的Iterable类型判断
for collections import Iterable    #实现不了！
isinstance('abc', Iterable)
isinstance([1,2,3], Iterable)
isinstance(123, Iterable)

4.对list实现索引——元素对
for i, value in enumerate(['A', 'B', 'C']):
	print i, value
0 A
1 B
2 C

for x, y in [(1, 1), (2, 4), (3, 9)] :    #同时引用两个变量
	print x, y
1 1
2 4
3 9

D.列表生成式
列表生成式即List Comprehensions，是Python内置的非常简单却强大的可以用来创建list的生成式
1.普通列表
>>> range(1,11)
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

2.循环生成列表
L = []    #生成[1x1, 2x2, 3x3, ..., 10x10]
for x in range(1,11):
	L.append(x * x)
print L
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

3.列表生成式
print [x *x for x in range(1,11)]    #写列表生成式时，把要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出来
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

print [m + n for m in 'ABC' for n in 'XYZ']    #两层循环
['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']

import os    #列出当前目录下的所有文件和目录名
print [d for d in os.listdir('.')]
['.mozilla', '.bash_logout', '.bash_profile', '.bashrc', '.config', '.cache', '.ICEauthority', '.local', '.esd_auth', '.bash_history', '.speech-dispatcher', 'Crash Reports', '5wb0m4wr.default', 'profiles.ini', '.gstreamer-0.10', '.pki', '.mplayer', '.wine', '.vim', '.gitconfig', '.ssh', 'Desktop', 'Downloads', 'Templates', 'Public', 'Documents', 'Music', 'Pictures', 'Videos', '.gphoto', 'musicbox.log', '.netease-musicbox', '.viminfo', '1.py']

d = {'x': 'A', 'y': 'B', 'z': 'C'}    #for循环其实可以同时使用两个甚至多个变量，比如dict的iteritems()可以同时迭代key和value
for k, v in d.iteritems():
	print k, '=',v
y = B
x = A
z = C

d = {'x': 'A', 'y': 'B', 'z': 'C'}    #for循环的变种
print [k + '=' + v for k, v in d.iteritems()]
['y=B', 'x=A', 'z=C']

L = ['Hello', 'World', 'IBM', 'Apple']    #把一个list中所有的字符串变成小写
print [s.lower() for s in L]
['hello', 'world', 'ibm', 'apple']

>>> x = 'abc'    #使用内建函数isinstance可判断一个对象是不是字符串
>>> y = 123
>>> isinstance(x,str)
True
>>> isinstance(y,str)
False

E.生成器（Generator）
通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。
所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器（Generator）。
1.[]改成()
L = [x *x for x in range(10)]
print L
g = (x *x for x in range(10))    #把list中的[]改成()便成了列表生成器
for n in g:
	print n    #调用g中的元素也可print g.next()，不过此种方法每次只能输出一个值，不建议使用
print g
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
0
1
4
9
16
25
36
49
64
81
<generator object <genexpr> at 0x760fa0>

2.yield
斐波那契数列
除第一个和第二个数外，任意一个数都可由前两个数相加得到
def fib(max):    #普通循环
	n, a, b = 0, 0, 1
	while n < max:
		print b
		a, b = b, a + b
		n = n +1
fib(6)
1
1
2
3
5
8

def fib(max):
	n, a, b = 0, 0, 1
	while n < max:
		yield b    #通过把print改成yield变成生成器
		a, b = b, a + b
		n = n +1
for n in fib(6):
	print n
print fib(6)
1
1
2
3
5
8
<generator object fib at 0xa981e0>






