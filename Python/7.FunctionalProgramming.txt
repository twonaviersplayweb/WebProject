A.高阶函数
1.变量可以指向高阶函数
>>> abs(-10)    #函数调用
10
>>> abs    #函数本身
<built-in function abs>
>>> x = abs(-10)    #函数调用结果赋值给变量
>>> x
10
>>> f = abs    #函数赋值给变量
>>> f
<built-in function abs>
>>> f(-10)    #f指向abs函数本身
10

2.函数名是指向函数的变量
对于abs()这个函数，可以把abs看成一个变量，它指向一个可以计算绝对值的函数
>>> abs = 10
>>> abs(-10)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'int' object is not callable
由于abs函数实际上是定义在__builtin__模块中的，所以要让修改abs变量的指向在其它模块也生效，要用__builtin__.abs = 10

3.传入函数
变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数
def add( a, b, f ):
	print f(a) + f(b)
add(5, 6, abs)
11

4.map
map()函数接收两个参数，一个是函数，一个是序列，map将传入的函数依次作用到序列的每个元素，并把结果作为新的list返回。
def f(x):    #函数f(x)=x2，要把这个函数作用在一个list [1, 2, 3, 4, 5, 6, 7, 8, 9]上
	print x * x
map(f, [1,2,3,4,5,6,7,8,9])    #map()传入的第一个参数是f，即函数对象本身
1
4
9
16
25
36
49
64
81

L = []    #使用for循环实现上面的例子
for n in [1, 2, 3, 4, 5, 6, 7, 8, 9]:
	L.append(n *n)
print L
[1, 4, 9, 16, 25, 36, 49, 64, 81]

>>> map(str,[1,2,3,4])    #直接命令行中输入把数字变成字符串
['1', '2', '3', '4']

5.reduce
reduce把一个函数作用在一个序列[x1, x2, x3...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算
reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)

def add(x, y):    #序列求和
	return x + y
print reduce(add, [1,3,5,7,9])
25

def fn(x, y):    #把序列[1, 3, 5, 7, 9]变换成整数13579
	return x * 10 + y
print reduce(fn, [1,3,5,7,9])
13579

def fn(x, y):    #把str转换为int
	return x * 10 + y
def char2num(s):
	return {'0':0, '1':1,'2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9}[s]
print reduce(fn, map(char2num, '13579'))
13579

def str2int(s):    #整理后的式子，用来转换字符串到数字
    def fn(x, y):
        return x * 10 + y
    def char2num(s):
        return {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}[s]
    return reduce(fn, map(char2num, s))

def char2num(s):    #lambda函数简化上式
    return {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}[s]
def str2int(s):
    return reduce(lambda x,y: x*10+y, map(char2num, s))

6.filter
filter()函数用于过滤序列
和map()类似，filter()也接收一个函数和一个序列。和map()不同的时，filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素
def is_odd(n):    #过滤偶数，保留奇数
	return n % 2 == 1
print filter(is_odd,[1,2,3,4,5,6,7,8,9])
[1, 3, 5, 7, 9]

def not_empty(s):    #过滤空字符串
	return s and s.strip()
print filter(not_empty,['A', ' ', 'B', None, 'C', '   '])
['A', 'B', 'C']

7.sorted
sorted()函数可以对list进行排序
>>> sorted([1,3,5,2,4,6,3])    #对List进行排序
[1, 2, 3, 3, 4, 5, 6]

sorted()函数也是一个高阶函数，它还可以接收一个比较函数来实现自定义的排序
def reversed_cmp(x, y):    #递减排序
	if x > y :
		return -1
	if x < y :
		return 1
	return 0
print sorted([36,5,12,9,21], reversed_cmp)
[36, 21, 12, 9, 5]

>>> sorted(['bob', 'about', 'Zoo', 'Credit'])    #字符串排列
['Credit', 'Zoo', 'about', 'bob']
对字符串排序，是按照ASCII的大小比较的，由于'Z' < 'a'，结果，大写字母Z会排在小写字母a的前面

def cmp_ignore_case(s1, s2):    #忽略大小写排序，实际上是先把小写转换成大写，再比较
	u1 = s1.upper()
	u2 = s2.upper()
	if u1 < u2:
		return -1
	if u1 > u2:
		return 1
	return 0
print sorted(['bob', 'about', 'Zoo', 'Credit'], cmp_ignore_case)
['about', 'bob', 'Credit', 'Zoo']

B.返回函数
1.函数作为返回值





