A.高阶函数
1.变量可以指向高阶函数
>>> abs(-10)    #函数调用
10
>>> abs    #函数本身
<built-in function abs>
>>> x = abs(-10)    #函数调用结果赋值给变量
>>> x
10
>>> f = abs    #函数赋值给变量
>>> f
<built-in function abs>
>>> f(-10)    #f指向abs函数本身
10

2.函数名是指向函数的变量
对于abs()这个函数，可以把abs看成一个变量，它指向一个可以计算绝对值的函数
>>> abs = 10
>>> abs(-10)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'int' object is not callable
由于abs函数实际上是定义在__builtin__模块中的，所以要让修改abs变量的指向在其它模块也生效，要用__builtin__.abs = 10

3.传入函数
变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数
def add( a, b, f ):
	print f(a) + f(b)
add(5, 6, abs)
11

4.map
map()函数接收两个参数，一个是函数，一个是序列，map将传入的函数依次作用到序列的每个元素，并把结果作为新的list返回。
def f(x):    #函数f(x)=x2，要把这个函数作用在一个list [1, 2, 3, 4, 5, 6, 7, 8, 9]上
	print x * x
map(f, [1,2,3,4,5,6,7,8,9])    #map()传入的第一个参数是f，即函数对象本身
1
4
9
16
25
36
49
64
81

L = []    #使用for循环实现上面的例子
for n in [1, 2, 3, 4, 5, 6, 7, 8, 9]:
	L.append(n *n)
print L
[1, 4, 9, 16, 25, 36, 49, 64, 81]

>>> map(str,[1,2,3,4])    #直接命令行中输入把数字变成字符串
['1', '2', '3', '4']

5.reduce
reduce把一个函数作用在一个序列[x1, x2, x3...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算
reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)

def add(x, y):    #序列求和
	return x + y
print reduce(add, [1,3,5,7,9])
25

def fn(x, y):    #把序列[1, 3, 5, 7, 9]变换成整数13579
	return x * 10 + y
print reduce(fn, [1,3,5,7,9])
13579

def fn(x, y):    #把str转换为int
	return x * 10 + y
def char2num(s):
	return {'0':0, '1':1,'2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9}[s]
print reduce(fn, map(char2num, '13579'))
13579

def str2int(s):    #整理后的式子，用来转换字符串到数字
    def fn(x, y):
        return x * 10 + y
    def char2num(s):
        return {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}[s]
    return reduce(fn, map(char2num, s))

def char2num(s):    #lambda函数简化上式
    return {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}[s]
def str2int(s):
    return reduce(lambda x,y: x*10+y, map(char2num, s))

6.filter
filter()函数用于过滤序列
和map()类似，filter()也接收一个函数和一个序列。和map()不同的时，filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素
def is_odd(n):    #过滤偶数，保留奇数
	return n % 2 == 1
print filter(is_odd,[1,2,3,4,5,6,7,8,9])
[1, 3, 5, 7, 9]

def not_empty(s):    #过滤空字符串
	return s and s.strip()
print filter(not_empty,['A', ' ', 'B', None, 'C', '   '])
['A', 'B', 'C']

7.sorted
sorted()函数可以对list进行排序
>>> sorted([1,3,5,2,4,6,3])    #对List进行排序
[1, 2, 3, 3, 4, 5, 6]

sorted()函数也是一个高阶函数，它还可以接收一个比较函数来实现自定义的排序
def reversed_cmp(x, y):    #递减排序
	if x > y :
		return -1
	if x < y :
		return 1
	return 0
print sorted([36,5,12,9,21], reversed_cmp)
[36, 21, 12, 9, 5]

>>> sorted(['bob', 'about', 'Zoo', 'Credit'])    #字符串排列
['Credit', 'Zoo', 'about', 'bob']
对字符串排序，是按照ASCII的大小比较的，由于'Z' < 'a'，结果，大写字母Z会排在小写字母a的前面

def cmp_ignore_case(s1, s2):    #忽略大小写排序，实际上是先把小写转换成大写，再比较
	u1 = s1.upper()
	u2 = s2.upper()
	if u1 < u2:
		return -1
	if u1 > u2:
		return 1
	return 0
print sorted(['bob', 'about', 'Zoo', 'Credit'], cmp_ignore_case)
['about', 'bob', 'Credit', 'Zoo']

B.返回函数
1.函数作为返回值
def calc_sum(*args):    #普通的加法运算
	ax = 0
	for n in args:
		ax = ax +n
	print ax

calc_sum(1,2,3)
6

def lazy_sum(*args):    #不返回求和结果，返回求和函数
	def sum():
		ax = 0
		for n in args:
			ax = ax +n
		return ax
	return sum
f = lazy_sum(1,3,5,7,9)    #调用的是求和函数
print f
print f()
<function sum at 0x1771d70>
25
在函数lazy_sum中又定义了函数sum，并且，内部函数sum可以引用外部函数lazy_sum的参数和局部变量，当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种程序结构称为“闭包（Closure）“
当调用lazy_sum()时，每次调用都会返回一个新的函数，即使传入相同的参数
返回的函数在其定义内部引用了局部变量args，当一个函数返回了一个函数后，其内部的局部变量还被新函数引用

2.闭包
def count():
	fs = []
	for i in range(1,4):
		def f():
			return i * i
		fs.append(f)
	return fs
f1 ,f2, f3 = count() 
print f1(), f2(), f3()
9 9 9    #返回的函数引用了变量i，但它并非立刻执行。等到3个函数都返回时，它们所引用的变量i已经变成了3，因此最终结果为9

返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量
def count():
	fs = []
	for i in range(1,4):
		def f(j):
			def g():
				return j *j
			return g
		fs.append(f(i))
	return  fs
f1, f2, f3 = count()
print f1(), f2(), f3()
1 4 9    #如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变

C.匿名函数
>>> map(lambda x : x * x ,[1,2,3,4,5,6,7,8,9])    #直接传入匿名函数
[1, 4, 9, 16, 25, 36, 49, 64, 81]

def f(x):    #lambda x : x * x相当于此函数
	return x * x
关键字lambda表示匿名函数，冒号前面的x表示函数参数，匿名函数有个限制，就是只能有一个表达式，不用写return，返回值就是该表达式的结果.用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数.
>>> f = lambda x : x * x
>>> f(5)
25

也可以把匿名函数作为返回值返回
def build(x, y):
    return lambda: x * x + y * y
Python对匿名函数的支持有限，只有一些简单的情况下可以使用匿名函数.

D.装饰器
def now():
	print '2015-07-30'
f = now
f()
print now.__name__    #__name__属性可以获得函数名（敲击两次下划线）
print f.__name__
2015-07-30
now
now

在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）
def log(func):
	def wrapper(*args, **kw):
		print 'call %s(): ' % func.__name__
		return func(*args, **kw)
	return wrapper
@log    #now = log(now),log是一个decorator，接受一个函数作为参数，并返回一个函数。
def now():
	print '2015-07-30'
now()
call now(): 
2015-07-30
由于log()是一个decorator，返回一个函数，所以，原来的now()函数仍然存在，只是现在同名的now变量指向了新的函数，于是调用now()将执行新函数，即在log()函数中返回的wrapper()函数。
wrapper()函数的参数定义是(*args, **kw)，因此，wrapper()函数可以接受任意参数的调用。在wrapper()函数内，首先打印日志，再紧接着调用原始函数。

def log(text):    #自定义log的文本
	def decorator(func):
		def wrapper(*args, **kw):
			print '%s %s():' % (text, func.__name__)
			return func(*args, **kw)
		return wrapper
	return decorator
@log('execute')   #now = log('execute')(now)
def now():
	print '2015-07-30'
now()
execute now():
2015-07-30

一个完整的decorator的写法：
import functools
def los(func):
	@functools.wraps(func)
	def wrapper(*args, **kw):
		print 'call %s(): ' % func.__name__
		return func(*args, **kw)
	return wrapper

import functools    #带有参数的装饰器
def los(text):
	def decorator(func):
		@functools.wraps(func)
		def wrapper(*args, **kw):
			print '%s %s(): ' % (text, func.__name__)
			return func(*args, **kw)
		return wrapper
	return decorator

E.偏函数（Partial function）
>>> int('12345',base=8)    #int()函数提供额外的base参数，默认值为10.如果传入base参数，就可以做N进制的转换
5349
>>> int('12345',16)
74565
def int2(x,base=2):    #二进制转换
	return int(x, base)
print int2('1000000')
print int2('1010101')
64
85

import functools    #functools.partial的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单。
int2 = functools.partial(int, base=2)
print int2('1000000')
print int2('1010101')
64
85

创建偏函数时，实际上可以接收函数对象、*args和**kw这3个参数
int2 = functools.partial(int, base=2)
固定了int()函数的关键字参数base，也就是：int2('10010')相当于：kw = { base: 2 }，int('10010', **kw)

max2 = functools.partial(max, 10)
会把10作为*args的一部分自动加到左边
max2(5, 6, 7)相当于：args = (10, 5, 6, 7)，max(*args)







