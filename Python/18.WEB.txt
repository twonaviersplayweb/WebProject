A.WEB发展

Client/Server模式 ————> Browser/Server模式

Web开发经历了几个阶段:
1.静态Web页面：由文本编辑器直接编辑并生成静态的HTML页面，如果要修改Web页面的内容，就需要再次编辑HTML源文件，早期的互联网Web页面就是静态的；
2.CGI：由于静态Web页面无法与用户交互，比如用户填写了一个注册表单，静态Web页面就无法处理.要处理用户发送的动态数据，出现了Common Gateway Interface，简称CGI，用C/C++编写.
3.ASP/JSP/PHP：由于Web应用特点是修改频繁，用C/C++这样的低级语言非常不适合Web开发，而脚本语言由于开发效率高，与HTML结合紧密，因此，迅速取代了CGI模式.ASP是微软推出的用VBScript脚本编程的Web开发技术，而JSP用Java来编写脚本，PHP本身则是开源的脚本语言.
4.MVC：为了解决直接用脚本语言嵌入HTML导致的可维护性差的问题，Web应用也引入了Model-View-Controller的模式，来简化Web开发.ASP发展为ASP.Net，JSP和PHP也有一大堆MVC框架

B.HTTP协议
在Web应用中，服务器把网页传给浏览器，实际上就是把网页的HTML代码发送给浏览器，让浏览器显示出来.而浏览器和服务器之间的传输协议是HTTP，所以：
HTML是一种用来定义网页的文本，会HTML，就可以编写网页；
HTTP是在网络上传输HTML的协议，用于浏览器和服务器的通信.

以新浪网为例：
Elements显示网页的结构，Network显示浏览器和服务器的通信.
在Network中，定位到第一条记录，点击，右侧将显示Request Headers，点击右侧的view source

1.Request Headers    #浏览器发给新浪服务器的请求
GET / HTTP/1.1                                               #GET表示一个读取请求，将从服务器获得网页数据，/表示URL的路径，URL总是以/开头，/就表示首页，
                                                             最后的HTTP/1.1指示采用的HTTP协议版本是1.1,1.1版本允许多个HTTP请求复用一个TCP连接，以加快传输速度
Host: www.sina.com.cn    #表示请求的域名是www.sina.com.cn.如果一台服务器有多个网站，服务器就需要通过Host来区分浏览器请求的是哪个网站
Connection: keep-alive
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.155 Safari/537.36
Accept-Encoding: gzip, deflate, sdch
Accept-Language: zh-CN,zh;q=0.8
Cookie: ********太长省略
RA-Ver: 3.0.7
RA-Sid: DA0BB21D-20141106-153144-6e68af-a98601

2.Response Headers    #显示服务器返回的原始响应数据
HTTP/1.1 200 OK    #200表示一个成功的响应，OK是说明
Content-Type: text/html    #Content-Type指示响应的内容，这里是text/html表示HTML网页
Vary: Accept-Encoding
X-Powered-By: shci_v1.03
Content-Encoding: gzip
Server: nginx
Date: Wed, 12 Aug 2015 03:45:26 GMT
Last-Modified: Wed, 12 Aug 2015 03:43:57 GMT
Expires: Wed, 12 Aug 2015 03:46:26 GMT
Cache-Control: max-age=60
Age: 56
Content-Length: 127091
X-Cache: HIT from xd33-90.sina.com.cn

3.HTTP请求
步骤1：浏览器首先向服务器发送HTTP请求，请求包括：
方法：GET还是POST，GET仅请求资源，POST会附带用户数据；
路径：/full/url/path；
域名：由Host头指定：Host: www.sina.com.cn
以及其他相关的Header；
如果是POST，那么请求还包括一个Body，包含用户数据.
步骤2：服务器向浏览器返回HTTP响应，响应包括：
响应代码：200表示成功，3xx表示重定向，4xx表示客户端发送的请求有错误，5xx表示服务器端处理时发生了错误；
响应类型：由Content-Type指定；
以及其他相关的Header；
通常服务器的HTTP响应会携带内容，也就是有一个Body，包含响应的内容，网页的HTML源码就在Body中.
步骤3：如果浏览器还需要继续向服务器请求其他资源，比如图片，就再次发出HTTP请求，重复步骤1、2.

4.HTTP格式
每个HTTP请求和响应都遵循相同的格式，一个HTTP包含Header和Body两部分，其中Body是可选的

HTTP GET请求的格式：
GET /path HTTP/1.1
Header1: Value1
Header2: Value2
Header3: Value3
每个Header一行一个，换行符是\r\n

HTTP POST请求的格式：
POST /path HTTP/1.1
Header1: Value1
Header2: Value2
Header3: Value3
body data goes here...
当遇到连续两个\r\n时，Header部分结束，后面的数据全部是Body.

HTTP响应的格式：
200 OK
Header1: Value1
Header2: Value2
Header3: Value3
body data goes here...
HTTP响应如果包含body，也是通过\r\n\r\n来分隔的.请再次注意，Body的数据类型由Content-Type头来确定，如果是网页，Body就是文本，如果是图片，Body就是图片的二进制数据.
当存在Content-Encoding时，Body数据是被压缩的，最常见的压缩方式是gzip，所以，看到Content-Encoding: gzip时，需要将Body数据先解压缩，才能得到真正的数据.压缩的目的在于减少Body的大小，加快网络传输.

C.WSGI接口
Web应用的本质就是：
浏览器发送一个HTTP请求；
服务器收到请求，生成一个HTML文档；
服务器把HTML文档作为HTTP响应的Body发送给浏览器；
浏览器收到HTTP响应，从HTTP Body取出HTML文档并显示.

Web Server Gateway Interface:只要求Web开发者实现一个函数，就可以响应HTTP请求

运行WSGI服务
# hello.py
def application(environ, start_response):    #environ：一个包含所有HTTP请求信息的dict对象；start_response：一个发送HTTP响应的函数
    start_response('200 OK', [('Content-Type', 'text/html')])    #Header只能发送一次，只能调用一次start_response()函数. start_response()函数接收两个参数
                                                                 一个是HTTP响应码，一个是一组list表示的HTTP Header，每个Header用一个包含两个str的tuple表示
    return '<h1>Hello, web!</h1>'

# server.py
from wsgiref.simple_server import make_server    #从wsgiref模块导入
from hello import application
httpd = make_server('', 8000, application)    # 创建一个服务器，IP地址为空，端口是8000，处理函数是application
print "Serving HTTP on port 8000..."
httpd.serve_forever()    # 开始监听HTTP请求

终端中运行：
[SETSUNA@localhost Desktop]$ python server.py
Serving HTTP on port 8000...
#在浏览器中输入http://localhost:8000/，后得到Hello,web!,随后终端中出现下面两行
127.0.0.1 - - [12/Aug/2015 18:35:28] "GET / HTTP/1.1" 200 20
127.0.0.1 - - [12/Aug/2015 18:35:28] "GET /favicon.ico HTTP/1.1" 200 20

无论多么复杂的Web应用程序，入口都是一个WSGI处理函数.HTTP请求的所有输入信息都可以通过environ获得，HTTP响应的输出都可以通过start_response()加上函数返回值作为Body

D.使用WEB框架

写一个app.py，处理3个URL，分别是：
GET /：首页，返回Home；
GET /signin：登录页，显示登录表单；
POST /signin：处理登录表单，显示登录结果

from flask import Flask    #app.py
from flask import request

app = Flask(__name__)
@app.route('/', methods = ['GET', 'POST'])
def home():
	return '<h1>Home</h1>'

@app.route('/signin', methods = ['GET'])
def signin_form():
	return '''<form action="/signin" method = "post">
	<p><input name = "username"></p>
	<p><input name = "password" type = "password"></p>
	<p><button type = "submit">Sign In</button></p>
	</form>'''

@app.route('/signin', methods = ['POST'] )
def signin():
	if request.form['username'] == 'admin' and request.form['password'] == 'password':
		return '<h3>Hello ,admin!</h3>'
	return '<h3>Bad username or password.</h3>'

if __name__ == '__main__':
	app.run()

终端运行：
[SETSUNA@localhost Desktop]$ sudo python app.py
[sudo] password for SETSUNA: 
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)    #浏览器中输入http://localhost:5000/，显示Home
127.0.0.1 - - [12/Aug/2015 19:02:46] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [12/Aug/2015 19:02:46] "GET /favicon.ico HTTP/1.1" 404 -    #以上两行为输入第一个地址后终端中所显示
127.0.0.1 - - [12/Aug/2015 19:02:58] "GET /signin HTTP/1.1" 200 -    #输入http://localhost:5000/signin后终端中显示，浏览器中出现输入登录和密码对话框
127.0.0.1 - - [12/Aug/2015 19:03:18] "POST /signin HTTP/1.1" 200 -    #正确输入admin,password后显示

E.使用模板
MVC：Model-View-Controller，中文名“模型-视图-控制器”
Python处理URL的函数就是C：Controller，Controller负责业务逻辑，比如检查用户名是否存在，取出用户信息等等；
包含变量{{ name }}的模板就是V：View，View负责显示逻辑，通过简单地替换一些变量，View最终输出的就是用户看到的HTML
Model是用来传给View的，这样View在替换变量的时候，就可以从Model中取出相应的数据

from flask import Flask, request, render_template    #app.py

app = Flask(__name__)
@app.route('/', methods = ['GET', 'POST'])
def home():
	return render_template('home.html')

@app.route('/signin', methods = ['GET'])
def signin_form():
	return render_template('form.html')

@app.route('/signin', methods = ['POST'] )
def signin():
	username = request.form['username']
	password = request.form['password']
	if username == 'admin' and password == 'password':
		return render_template('signin-ok.html', username = username)
	return render_template('form.html', message = 'Bad username or password', username = username)

if __name__ == '__main__':
	app.run()

<!DOCTYPE html>    #home.html
<html>
<head>
	<title>Home</title>
</head>
<body>
	<h1 style="font-style:italic">Home</h1>
</body>
</html>

<!DOCTYPE html>    #form.html
<html>
<head>
	<title>Please Sign In</title>
</head>
<body>
	{% if message %}
	<p style="color:red">{{message}}</p>
	{% endif %}
	<form action="/signin" method="post">
		<legend>Please sign in:</legend>
		<p><input name="username" placeholder="Username" value="{{username}}"></p>
		<p><input name="password" placeholder="Password" type="password"></p>
		<p><button type="submit">Sign In</button></p>
	</form>
</body>
</html>

<!DOCTYPE html>    #signin-ok.html
<html>
<head>
	<title>Welcome, {{username}}</title>
</head>
<body>
	<p>Welcome,{{username}}!</p>
</body>
</html>

home.html,form.html,sign-ok.html三个文件放在templates文件夹下，app.py跟templates文件夹在同一个目录下

终端运行结果：
[SETSUNA@localhost Desktop]$ sudo python app.py
[sudo] password for SETSUNA: 
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
127.0.0.1 - - [12/Aug/2015 19:49:06] "GET / HTTP/1.1" 200 -    #浏览器中输入http://127.0.0.1:5000/，显示Home
127.0.0.1 - - [12/Aug/2015 19:50:04] "GET /signin HTTP/1.1" 200 -    #输入http://127.0.0.1:5000/signin，显示登录框
127.0.0.1 - - [12/Aug/2015 19:50:39] "POST /signin HTTP/1.1" 200 -    #输入form的admin,password后显示Welcome,admin!

在Jinja2中，用{% ... %}表示指令
循环输出页码：
{% for i in page_list %}
    <a href="/page/{{ i }}">{{ i }}</a>
{% endfor %}

