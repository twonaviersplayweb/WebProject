A.面向对象编程
Object Oriented Programming，简称OOP，是一种程序设计思想.OOP把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数.

1.面向过程写法
std1 = { 'name' : 'Michael', 'score' : 98}
std2 = {'name' : 'Bob', 'score' : 81}
def print_score(std):
	print '%s : %s' % (std['name'], std['score'])
print_score(std1)
print_score(std2)
Michael : 98
Bob : 81

2.面向对象写法
class Student(object):

	def __init__(self, name, score):
		self.name = name
		self.score = score

	def print_score(self):
		print ' %s: %s ' % (self.name, self.score)
bart = Student('Bart Simpson', 59)    #给对象发消息实际上就是调用对象对应的关联函数，称之为对象的方法（Method）
lisa = Student('Lisa Simpson', 87)
bart.print_score()
lisa.print_score()
Bart Simpson: 59 
Lisa Simpson: 87 

采用面向对象的程序设计思想，首选思考的不是程序的执行流程，而是Student这种数据类型应该被视为一个对象，这个对象拥有name和score这两个属性（Property）.
类（Class）和实例（Instance）的概念是很自然的。Class是一种抽象概念，比如定义的Class——Student，是指学生这个概念，而实例（Instance）则是一个个具体的Student.
所以，面向对象的设计思想是抽象出Class，根据Class创建Instance.
面向对象的抽象程度又比函数要高，因为一个Class既包含数据，又包含操作数据的方法.

B.类和实例
class Student(object):    #class后面紧接着是类名，即Student，类名通常是大写开头的单词，紧接着是(object)，表示该类是从哪个类继承下来的，如果没有合适的继承类，就使用object类，这是所有类最终都会继承的类
	pass
bart = Student()    #定义好了Student类，就可以根据Student类创建出Student的实例，创建实例是通过类名+()实现的
bart.name = 'Bart  Simpson'    #给实例bart绑定一个name属性
print bart    
print Student
print bart.name
<__main__.Student object at 0x7fba191523d0>    #变量bart指向一个Student的object，后面的0x10a67a590是内存地址，每个object的地址都不一样，而Student本身则是一个类
<class '__main__.Student'>
Bart  Simpson

class Student(object):
	def __init__(self, name, score):    #通过定义一个特殊的__init__方法，在创建实例的时候，就把name，score等属性绑上去，self，表示创建的实例本身
		self.name = name
		self.score = score
bart = Student('Bart Simpon', 59)
print bart.name
print bart.score
Bart Simpon
59

C.数据封装
class Student(object):
	def __init__(self, name, score):
		self.name = name
		self.score = score
	def print_score(self):
		print '%s: %s' % (self.name, self.score)
bart = Student('Bart Simpson', 59)
bart.print_score()
Bart Simpson: 59
Student实例本身就拥有这些数据，要访问这些数据，就没有必要从外面的函数去访问，可以直接在Student类的内部定义访问数据的函数，这样，就把“数据”给封装起来了。这些封装数据的函数是和Student类本身是关联起来的，称之为类的方法，要定义一个方法，除了第一个参数是self外，其他和普通函数一样。要调用一个方法，只需要在实例变量上直接调用，除了self不用传递，其他参数正常传入.从外部看Student类，就只需要知道，创建实例需要给出name和score，而如何打印，都是在Student类的内部定义的，这些数据和逻辑被“封装”起来了，调用很容易，但却不用知道内部实现的细节

封装的另一个好处是可以给Student类增加新的方法
class Student(object):
	def __init__(self, name, score):
		self.name = name
		self.score = score
	def print_score(self):
		print '%s: %s' % (self.name, self.score)
	def get_grade(self):
		if self.score >= 90:
			print 'A'    #print should be return
		elif self .score >= 60:
			print 'B'
		else:
			print 'C'
bart = Student('Bart Simpson', 59)
bart.print_score()
bart.get_grade()

D.访问限制
class Student(object):
	def __init__(self, name, score):
		self.name = name
		self.score = score
	def print_score(self):
		print '%s: %s' % (self.name, self.score)
bart = Student('Bart Simpson', 98)
print bart.score
bart.score = 59    #外部代码还是可以自由地修改一个实例的name、score属性
print bart.score
98
59

如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线__，在Python中，实例的变量名如果以__开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问
class Student(object):
	def __init__(self, name, score):
		self.__name = name
		self.__score = score
	def print_score(self):
		print '%s: %s' % (self.__name, self.__score)
bart = Student('Bart Simpson', 98)
print bart.__score
bart.__score = 59
print bart.__score
Traceback (most recent call last):
  File "1.py", line 8, in <module>
    print bart.__score
AttributeError: 'Student' object has no attribute '__score'


如果外部代码要获取name和score怎么办？可以给Student类增加get_name和get_score这样的方法
def get_name(self):
		return self.__name
def get_score(self):
		return self.__score

如果又要允许外部代码修改score怎么办？可以给Student类增加set_score方法
def set_score(self,score):
		self.__score = score

def set_score(self,score):    #参数做检查，避免传入无效的参数
		if 0 <= score <=100 :
			self.__score = score
		else:
			raise ValueError('bad score')

在Python中，变量名类似__xxx__的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用__name__、__score__这样的变量名.
有些时候，你会看到以一个下划线开头的实例变量名，比如_name，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”.双下划线开头的实例变量是不是一定不能从外部访问呢？
其实也不是.不能直接访问__name是因为Python解释器对外把__name变量改成了_Student__name，所以，仍然可以通过_Student__name来访问__name变量

E.继承和多态
在OOP程序设计中，当定义一个class的时候，可以从某个现有的class继承，新的class称为子类（Subclass），而被继承的class称为基类、父类或超类（Base class、Super class）
class Animal(object):
	def run(self):
		print 'Animal is running...'
class Dog(Animal):    #继承最大的好处是子类获得了父类的全部功能。由于Animial实现了run()方法，因此，Dog和Cat作为它的子类，什么事也没干，就自动拥有了run()方法
	pass
class Cat(Animal):
	pass
dog = Dog()
cat = Cat()
dog.run()
cat.run()
Animal is running...
Animal is running...

添加子类：
class Animal(object):
	def run(self):
		print 'Animal is running...'
class Dog(Animal):
	def run(self):    #当子类和父类都存在相同的run()方法时，子类的run()覆盖了父类的run()，在运行的时候，总是会调用子类的run().这样就获得了继承的另一个好处：多态.
		print 'Dog is running...'
	def eat(self):
		print 'Eating meat... '
class Cat(Animal):
	def run(self):
		print 'Cat is running...'
dog = Dog()
cat = Cat()
dog.run()
dog.eat()
cat.run()
Dog is running...
Eating meat... 
Cat is running...

多态：
class Animal(object):
	def run(self):
		print 'Animal is running...'
class Dog(Animal):
	def run(self):    
		print 'Dog is running...'
a = list()
b = Animal()
c = Dog()
print isinstance(a, list)
print isinstance(b, Animal)
print isinstance(c, Dog)
print isinstance(c, Animal)
print isinstance(b, Dog)
True
True
True
True
False
