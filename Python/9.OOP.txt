A.面向对象编程
Object Oriented Programming，简称OOP，是一种程序设计思想.OOP把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数.

1.面向过程写法
std1 = { 'name' : 'Michael', 'score' : 98}
std2 = {'name' : 'Bob', 'score' : 81}
def print_score(std):
	print '%s : %s' % (std['name'], std['score'])
print_score(std1)
print_score(std2)
Michael : 98
Bob : 81

2.面向对象写法
class Student(object):

	def __init__(self, name, score):
		self.name = name
		self.score = score

	def print_score(self):
		print ' %s: %s ' % (self.name, self.score)
bart = Student('Bart Simpson', 59)    #给对象发消息实际上就是调用对象对应的关联函数，称之为对象的方法（Method）
lisa = Student('Lisa Simpson', 87)
bart.print_score()
lisa.print_score()
Bart Simpson: 59 
Lisa Simpson: 87 

采用面向对象的程序设计思想，首选思考的不是程序的执行流程，而是Student这种数据类型应该被视为一个对象，这个对象拥有name和score这两个属性（Property）.
类（Class）和实例（Instance）的概念是很自然的。Class是一种抽象概念，比如定义的Class——Student，是指学生这个概念，而实例（Instance）则是一个个具体的Student.
所以，面向对象的设计思想是抽象出Class，根据Class创建Instance.
面向对象的抽象程度又比函数要高，因为一个Class既包含数据，又包含操作数据的方法.

B.类和实例
class Student(object):    #class后面紧接着是类名，即Student，类名通常是大写开头的单词，紧接着是(object)，表示该类是从哪个类继承下来的，如果没有合适的继承类，就使用object类，这是所有类最终都会继承的类
	pass
bart = Student()    #定义好了Student类，就可以根据Student类创建出Student的实例，创建实例是通过类名+()实现的
bart.name = 'Bart  Simpson'    #给实例bart绑定一个name属性
print bart    
print Student
print bart.name
<__main__.Student object at 0x7fba191523d0>    #变量bart指向一个Student的object，后面的0x10a67a590是内存地址，每个object的地址都不一样，而Student本身则是一个类
<class '__main__.Student'>
Bart  Simpson

class Student(object):
	def __init__(self, name, score):    #通过定义一个特殊的__init__方法，在创建实例的时候，就把name，score等属性绑上去，self，表示创建的实例本身
		self.name = name
		self.score = score
bart = Student('Bart Simpon', 59)
print bart.name
print bart.score
Bart Simpon
59

C.数据封装
class Student(object):
	def __init__(self, name, score):
		self.name = name
		self.score = score
	def print_score(self):
		print '%s: %s' % (self.name, self.score)
bart = Student('Bart Simpson', 59)
bart.print_score()
Bart Simpson: 59
Student实例本身就拥有这些数据，要访问这些数据，就没有必要从外面的函数去访问，可以直接在Student类的内部定义访问数据的函数，这样，就把“数据”给封装起来了。这些封装数据的函数是和Student类本身是关联起来的，称之为类的方法，要定义一个方法，除了第一个参数是self外，其他和普通函数一样。要调用一个方法，只需要在实例变量上直接调用，除了self不用传递，其他参数正常传入.从外部看Student类，就只需要知道，创建实例需要给出name和score，而如何打印，都是在Student类的内部定义的，这些数据和逻辑被“封装”起来了，调用很容易，但却不用知道内部实现的细节

封装的另一个好处是可以给Student类增加新的方法
class Student(object):
	def __init__(self, name, score):
		self.name = name
		self.score = score
	def print_score(self):
		print '%s: %s' % (self.name, self.score)
	def get_grade(self):
		if self.score >= 90:
			print 'A'    #print should be return
		elif self .score >= 60:
			print 'B'
		else:
			print 'C'
bart = Student('Bart Simpson', 59)
bart.print_score()
bart.get_grade()

D.访问限制
class Student(object):
	def __init__(self, name, score):
		self.name = name
		self.score = score
	def print_score(self):
		print '%s: %s' % (self.name, self.score)
bart = Student('Bart Simpson', 98)
print bart.score
bart.score = 59    #外部代码还是可以自由地修改一个实例的name、score属性
print bart.score
98
59

如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线__，在Python中，实例的变量名如果以__开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问
class Student(object):
	def __init__(self, name, score):
		self.__name = name
		self.__score = score
	def print_score(self):
		print '%s: %s' % (self.__name, self.__score)
bart = Student('Bart Simpson', 98)
print bart.__score
bart.__score = 59
print bart.__score
Traceback (most recent call last):
  File "1.py", line 8, in <module>
    print bart.__score
AttributeError: 'Student' object has no attribute '__score'


如果外部代码要获取name和score怎么办？可以给Student类增加get_name和get_score这样的方法
def get_name(self):
		return self.__name
def get_score(self):
		return self.__score

如果又要允许外部代码修改score怎么办？可以给Student类增加set_score方法
def set_score(self,score):
		self.__score = score

def set_score(self,score):    #参数做检查，避免传入无效的参数
		if 0 <= score <=100 :
			self.__score = score
		else:
			raise ValueError('bad score')

在Python中，变量名类似__xxx__的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用__name__、__score__这样的变量名.
有些时候，你会看到以一个下划线开头的实例变量名，比如_name，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”.双下划线开头的实例变量是不是一定不能从外部访问呢？
其实也不是.不能直接访问__name是因为Python解释器对外把__name变量改成了_Student__name，所以，仍然可以通过_Student__name来访问__name变量

E.继承和多态
在OOP程序设计中，当定义一个class的时候，可以从某个现有的class继承，新的class称为子类（Subclass），而被继承的class称为基类、父类或超类（Base class、Super class）
class Animal(object):
	def run(self):
		print 'Animal is running...'
class Dog(Animal):    #继承最大的好处是子类获得了父类的全部功能。由于Animial实现了run()方法，因此，Dog和Cat作为它的子类，什么事也没干，就自动拥有了run()方法
	pass
class Cat(Animal):
	pass
dog = Dog()
cat = Cat()
dog.run()
cat.run()
Animal is running...
Animal is running...

添加子类：
class Animal(object):
	def run(self):
		print 'Animal is running...'
class Dog(Animal):
	def run(self):    #当子类和父类都存在相同的run()方法时，子类的run()覆盖了父类的run()，在运行的时候，总是会调用子类的run().这样就获得了继承的另一个好处：多态.
		print 'Dog is running...'
	def eat(self):
		print 'Eating meat... '
class Cat(Animal):
	def run(self):
		print 'Cat is running...'
dog = Dog()
cat = Cat()
dog.run()
dog.eat()
cat.run()
Dog is running...
Eating meat... 
Cat is running...

多态：
class Animal(object):
	def run(self):
		print 'Animal is running...'
class Dog(Animal):
	def run(self):    
		print 'Dog is running...'
a = list()
b = Animal()
c = Dog()
print isinstance(a, list)
print isinstance(b, Animal)
print isinstance(c, Dog)
print isinstance(c, Animal)
print isinstance(b, Dog)    #Dog可以看成Animal，但Animal不可以看成Dog
True
True
True
True
False

class Animal(object):
	def run(self):
		print 'Animal is running...'
class Dog(Animal):
	def run(self):
		print 'Dog is running'
class Cat(Animal):
	def run(self):
		print 'Cat is running'
class Tortoise(Animal):
	def run(self):
		print 'Tortoise is running slowly...'
def run_twice(animal):
	animal.run()
	animal.run()
run_twice(Animal())
run_twice(Dog())
run_twice(Cat())
run_twice(Tortoise())
Animal is running...
Animal is running...
Dog is running
Dog is running
Cat is running
Cat is running
Tortoise is running slowly...
Tortoise is running slowly...
多态的好处就是，当需要传入Dog、Cat、Tortoise……时，只需要接收Animal类型就可以了，因为Dog、Cat、Tortoise……都是Animal类型，然后，按照Animal类型进行操作即可。由于Animal类型有run()方法，因此，传入的任意类型，只要是Animal类或者子类，就会自动调用实际类型的run()方法
“开闭”原则：对扩展开放：允许新增Animal子类；对修改封闭：不需要修改依赖Animal类型的run_twice()等函数.

F.获取对象信息
1.type()
>>> type(123)
<type 'int'>
>>> type('str')
<type 'str'>
>>> type(None)
<type 'NoneType'>
>>> type(abs)
<type 'builtin_function_or_method'>
>>> type(123) == type(456)
True
>>> type('abc') == type('123')
True
>>> type('abc') == type(123)
False

>>> import types
>>> type('abc') == types.StringType
True
>>> type(u'abc') == types.UnicodeType
True
>>> type([]) == types.ListType
True
>>> type(str) == types.TypeType    
True
>>> type(int) == type(str) == types.TypeType    #所有类型本身的类型就是TypeType
True

2.isinstance()
使用于类
class Animal(object):
	def run(self):
		print 'Animal is running...'
class Dog(Animal):
	def run(self):
		print 'Dog is running...'
class Husky(Dog):
	def run(self):
		print 'Husky is running...'
a = Animal()
d = Dog()
h = Husky()
print isinstance(h, Husky)
print isinstance(h, Dog)
print isinstance(h, Animal)
print isinstance(d, Dog) and isinstance(d, Animal)
print isinstance(d, Husky)
print isinstance('a', str)    #能用type()判断的基本类型也可以用isinstance()判断
print isinstance(u'a', unicode)
print isinstance('a', unicode)
print isinstance('a', (str, unicode))    #判断一个变量是否是某些类型中的一种
print isinstance(u'a', (str, unicode))
print isinstance(u'a', basestring)    #str和unicode都是从basestring继承下来的
True
True
True
True
False
True
True
False
True
True
True

3.dir()
要获得一个对象的所有属性和方法，可以使用dir()函数，它返回一个包含字符串的list
>>> dir('ABC')
['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_formatter_field_name_split', '_formatter_parser', 'capitalize', 'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
>>> len('ABC')    #如果你调用len()函数试图获取一个对象的长度，实际上，在len()函数内部，它自动去调用该对象的__len__()方法,与下面那个等价
3
>>> 'ABC'.__len__()
3

class MyObject(object):
	def __len__(self):
		return 100
obj = MyObject()
print len(obj)
100

>>> 'ABC'.lower()    #lower()将大写字母改成小写字母
'abc'

class MyObject(object):
	def __init__(self):
		self.x = 9
	def power(self):
		return self.x * self.x
obj = MyObject()
print hasattr(obj, 'x')    # 有属性'x'吗？
print obj.x
print hasattr(obj, 'y')
print setattr(obj, 'y', 19)    #设置属性'y'
print hasattr(obj, 'y')
print getattr(obj, 'y')    #获取属性'y'
print obj.y
True
9
False
None
True
19
19

如果试图获取不存在的属性，会抛出AttributeError的错误：
>>> getattr(obj, 'z') # 获取属性'z'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'MyObject' object has no attribute 'z'
可以传入一个default参数，如果属性不存在，就返回默认值：
>>> getattr(obj, 'z', 404) # 获取属性'z'，如果不存在，返回默认值404
404

也可以获得对象的方法：
>>> hasattr(obj, 'power') # 有属性'power'吗？
True
>>> getattr(obj, 'power') # 获取属性'power'
<bound method MyObject.power of <__main__.MyObject object at 0x108ca35d0>>
>>> fn = getattr(obj, 'power') # 获取属性'power'并赋值到变量fn
>>> fn # fn指向obj.power
<bound method MyObject.power of <__main__.MyObject object at 0x108ca35d0>>
>>> fn() # 调用fn()与调用obj.power()是一样的
81

G.__solts__
1.给实例绑定属性
class Student(object):
	pass
s = Student()
s.name = 'Michael'
print s.name
Michael

2.给实例绑定方法
class Student(object):
	pass

def set_age(self, age):    #定义一个函数作为实例方法
	self.age = age
s = Student()
from types import MethodType
s.set_age = MethodType(set_age, s, Student)    #给实例绑定一个方法
s.set_age(25)
print s.age
s2 = Student()    #创建新的实例，失败，未绑定方法
s2.set_age(25)    #尝试调用方法
25
Traceback (most recent call last):
  File "1.py", line 12, in <module>
    s2.set_age(25)
AttributeError: 'Student' object has no attribute 'set_age'

class Student(object):
	pass
def set_age(self, age):
	self.age = age
def set_score(self, score):
	self.score = score
s = Student()
s2 = Student()
from types import MethodType
Student.set_score = MethodType(set_score, None ,Student)    #给全局绑定方法
s.set_score(100)
print s.score
s2.set_score(99)
print s2.score
100
99

3.__slots__
Python允许在定义class的时候，定义一个特殊的__slots__变量，来限制该class能添加的属性,__slots__定义的属性仅对当前类起作用，对继承的子类是不起作用的
class Student(object):
	__slots__ = ('name', 'age')    #用tuple定义允许绑定的属性名称
s = Student()
s.name = 'Setsuna'
s.age = 25
print s.name
print s.age
s.score = 99
print s.score
Setsuna
25
Traceback (most recent call last):
  File "1.py", line 8, in <module>
    s.score = 99
AttributeError: 'Student' object has no attribute 'score'

class Student(object):
	__slots__ = ('name', 'age')
class GraduateStudent(Student):
	pass
g = GraduateStudent()    #__slots__对继承的子类无效，除非在子类中也定义__slots__，这样，子类允许定义的属性就是自身的__slots__加上父类的__slots__
g.score = 9999
print g.score
9999

H.property
class Student(object):
	def get_score(self):
		return self._score
	def set_score(self,value):
		if not isinstance(value, int):
			raise ValueError('score must be an integer!')
		if value < 0 or value > 100:
			raise ValueError('score must between 0 ~ 100!')
		self._score = value
s = Student()
s.set_score(60)
print s.get_score()
s.set_score(9999)
print s.get_score()
60
Traceback (most recent call last):
  File "1.py", line 13, in <module>
    s.set_score(9999)
  File "1.py", line 8, in set_score
    raise ValueError('score must between 0 ~ 100!')
ValueError: score must between 0 ~ 100!

Python内置的@property装饰器就是负责把一个方法变成属性调用的
class Student(object):
	@property    #把一个getter方法变成属性，只需要加上@property就可以了，@property本身又创建了另一个装饰器@score.setter，负责把一个setter方法变成属性赋值，于是,就拥有一个可控的属性操作
	def score(self):
	    return self._score
	@score.setter
	def score(self,value):
		if not isinstance(value, int):
			raise ValueError('score must be an integer!')
		if value < 0 or value > 100:
			raise ValueError('score must between 0 ~ 100!')
		self._score = value
s = Student()
s.score = 60
print s.score
s.score = 9999
print s.score
60
Traceback (most recent call last):
  File "1.py", line 15, in <module>
    s.score = 9999
  File "1.py", line 10, in score
    raise ValueError('score must between 0 ~ 100!')
ValueError: score must between 0 ~ 100!

设置读写权限：
class Student(object):
	@property
	def birth(self):    
	    return self._birth
	@birth.setter
	def birth(self, value):    #birth可读写
		self._birth = value
	@property
	def age(self):    #只读不能写
	    return 2015 - self._age

I.多重继承
1.实例
class Animal(object):
	pass
class Mammal(Animal):
	pass
class Bird(Animal):
	pass
class Runnable(object):
	def run(self):
		print 'Running...'
class Flyable(object):
	def fly(self):
		print 'Flying...'
class Dog(Mammal, Runnable):
	pass
class Bat(Mammal, Flyable):
	pass
通过多重继承，一个子类就可以同时获得多个父类的所有功能

2.Mixin
class Dog(Mammal, RunnableMixin, CarnivorousMixin):    #Minix设计，就是让一个类继承多重关系或功能
    pass

Python自带了TCPServer和UDPServer这两类网络服务，而要同时服务多个用户就必须使用多进程或多线程模型，这两种模型由ForkingMixin和ThreadingMixin提供。通过组合，就可以创造出合适的服务来

编写一个多进程模式的TCP服务，定义如下：
class MyTCPServer(TCPServer, ForkingMixin):
    pass

编写一个多线程模式的UDP服务，定义如下：
class MyUDPServer(UDPServer, ThreadingMixin):
    pass

如果打算搞一个更先进的协程模型，可以编写一个CoroutineMixin：
class MyTCPServer(TCPServer, CoroutineMixin):
    pass

J.定制类
特殊用途的函数
1.__str__
class Student(object):
	def __init__(self, name):
		self.name = name
	def __str__(self):
		return 'Student object (name: %s)' % self.name
print Student('Setsuna')	
Setsuna

直接显示变量调用的不是__str__()，而是__repr__()，两者的区别是__str__()返回用户看到的字符串，而__repr__()返回程序开发者看到的字符串，也就是说，__repr__()是为调试服务的
class Student(object):
	def __init__(self, name):
		self.name = name
	def __str__(self):
		return 'Student object (name: %s)' % self.name
__repr__ = __str__
print Student('Setsuna')

2.__iter__
class Fib(object):
	def __init__(self):
		self.a, self.b = 0, 1
	def __iter__(self):    # # 实例本身就是迭代对象，故返回自己
		return self
	def next(self):
		self.a, self.b = self.b, self.a +self.b
		if self.a > 100000:
			raise StopIteration()
		return self.a	
for n in Fib():
	print n
1
1
2
3
5
8
13
21
34
55
89
144
233
377
610
987
1597
2584
4181
6765
10946
17711
28657
46368
75025

3.__getitem__
使用__getitem__，可以实现像list一般取出下标
class Fib(object):
	def __init__(self):
		self.a, self.b = 0, 1
	def __iter__(self):
		return self
	def next(self):
		self.a, self.b = self.b, self.a +self.b
		if self.a > 100000:
			raise StopIteration()
		return self.a	
	def __getitem__(self, n):
		a, b = 1, 1
		for x in range(n):
			a, b = b, a + b
		return a
f = Fib()
print f [0], f [1],f [10], f [100]
1 1 89 573147844013817084101

Fib函数改版，可用切片
class Fib(object):
	def __init__(self):
		self.a, self.b = 0, 1
	def __iter__(self):
		return self
	def next(self):
		self.a, self.b = self.b, self.a +self.b
		if self.a > 100000:
			raise StopIteration()
		return self.a	
	def __getitem__(self, n):
		if isinstance(n, int):
			a, b = 1, 1
			for x in range(n):
				a, b = b, a+b
			return a
		if isinstance(n, slice):
			start = n.start
			stop = n.stop
			a, b =1, 1
			L = []
			for x in range(stop):
				if x >= start:
					L.append(a)
				a, b = b, a + b
			return L
f = Fib()
print f [0:5]
print f [:10]
print f [:10:2]
[1, 1, 2, 3, 5]
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]

把对象看成dict，__getitem__()的参数也可能是一个可以作key的object，例如str
与之对应的是__setitem__()方法，把对象视作list或dict来对集合赋值。最后，还有一个__delitem__()方法，用于删除某个元素

4.__getattr__
动态返回一个属性
class Student(object):
	def __init__(self):
		self.name = 'Setsuna'
	def __getattr__(self, attr):
		if attr == 'score' :
			return 99
		if attr == 'age' :
			return lambda : 25    #return to function
		raise AttributeError('\'Student\' object has no attribute \'%s\'' % attr)
s = Student()
print s.name
print s.score
print s.age()
print s.abc
Setsuna
99
25
Traceback (most recent call last):
  File "1.py", line 14, in <module>
    print s.abc
  File "1.py", line 9, in __getattr__
    raise AttributeError('\'Student\' object has no attribute \'%s\'' % attr)    #若无该句，则返回None,__getattr__默认返回None
AttributeError: 'Student' object has no attribute 'abc'

只有在没有找到属性的情况下，才调用__getattr__，已有的属性，比如name，不会在__getattr__中查找

动态调用的用处（可以方便的调用API）
class Chain(object):
	def __init__(self, path = ''):
		self._path = path
	def __getattr__(self, path):
		return Chain('%s/%s' % (self._path, path))
	def __str__(self):
		return self._path
print Chain().status.user.timeline.list
/status/user/timeline/list

5.__call__
任何类，只需要定义一个__call__()方法，就可以直接对实例进行调用.通过callable()函数，可以判断一个对象是否是“可调用”对象
class Student(object):
	def __init__(self, name):
		self.name = name
	def __call__ (self):    #__call__()还可以定义参数
		print('My name is %s.' % self.name)
s = Student('Setsuna')
s()
print callable(Student)    #判断一个对象是否能被调用，能被调用的对象就是一个Callable对象
print callable(max)
print callable([1,2,3])
print callable(None)
print callable('str')
My name is Setsuna.
True
True
False
False
False

K.元类
动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的
1.type()
先创建一个hello.py文档
class Hello(object):
	def hello(self, name = 'world'):
		print('Hello, %s.' % name)
在终端中先运行python，后输入
>>> from hello import Hello
>>> h = Hello()
>>> h.hello()
Hello, world.
>>> print(type(Hello))
<type 'type'>
>>> print(type(h))
<class 'hello.Hello'>
type()函数可以查看一个类型或变量的类型，Hello是一个class，它的类型就是type，而h是一个实例，它的类型就是class Hello

type()函数既可以返回一个对象的类型，又可以创建出新的类型
def fn(self, name = 'world'):
	print('Hello, %s.' % name)
Hello = type('Hello', (object,), dict(hello=fn))
h = Hello()
h.hello()
print(type(Hello))
print(type(h))
Hello, world.
<type 'type'>
<class '__main__.Hello'>
要创建一个class对象，type()函数依次传入3个参数：
    1.class的名称；
    2.继承的父类集合，注意Python支持多重继承，如果只有一个父类，别忘了tuple的单元素写法；
    3.class的方法名称与函数绑定，这里我们把函数fn绑定到方法名hello上.
通过type()函数创建的类和直接写class是完全一样的，因为Python解释器遇到class定义时，仅仅是扫描一下class定义的语法，然后调用type()函数创建出class.

2.metaclass(元类)
先定义metaclass，就可以创建类，最后创建实例
class ListMetaclass(type):
	def __new__(cls, name, bases, attrs):
		attrs['add'] = lambda self, value :self.append(value)
		return type.__new__(cls, name, bases, attrs)
class MyList(list):
	__metaclass__ = ListMetaclass    #指示Python解释器在创建MyList时，要通过ListMetaclass.__new__()来创建，在此，我们可以修改类的定义，
                                         比如，加上新的方法，然后，返回修改后的定义
L = MyList()
L.add(1)
print L
l = list()    #普通元类没有add()方法
l.add(1)
print l
[1]
Traceback (most recent call last):
  File "1.py", line 13, in <module>
    l.add(1)
AttributeError: 'list' object has no attribute 'add'

__new__()方法接收到的参数依次是：
    1.当前准备创建的类的对象；
    2.类的名字；
    3.类继承的父类集合；
    4.类的方法集合

3.ORM
Object Relational Mapping，即对象-关系映射，就是把关系数据库的一行映射为一个对象，也就是一个类对应一个表，这样，写代码更简单，不用直接操作SQL语句

精简的ORM框架
#!/usr/bin/env python
# -*- coding: utf-8 -*-

' Simple ORM using metaclass '

__author__ = 'Michael Liao'

class Field(object):
    def __init__(self, name, column_type):
        self.name = name
        self.column_type = column_type
    def __str__(self):
        return '<%s:%s>' % (self.__class__.__name__, self.name)

class StringField(Field):
    def __init__(self, name):
        super(StringField, self).__init__(name, 'varchar(100)')

class IntegerField(Field):
    def __init__(self, name):
        super(IntegerField, self).__init__(name, 'bigint')

class ModelMetaclass(type):

    def __new__(cls, name, bases, attrs):
        if name=='Model':
            return type.__new__(cls, name, bases, attrs)
        print('Found model: %s' % name)
        mappings = dict()
        for k, v in attrs.iteritems():
            if isinstance(v, Field):
                print('Found mapping: %s ==> %s' % (k, v))
                mappings[k] = v
        for k in mappings.iterkeys():
            attrs.pop(k)
        attrs['__mappings__'] = mappings # 保存属性和列的映射关系
        attrs['__table__'] = name # 假设表名和类名一致
        return type.__new__(cls, name, bases, attrs)

class Model(dict):
    __metaclass__ = ModelMetaclass

    def __init__(self, **kw):
        super(Model, self).__init__(**kw)

    def __getattr__(self, key):
        try:
            return self[key]
        except KeyError:
            raise AttributeError(r"'Model' object has no attribute '%s'" % key)

    def __setattr__(self, key, value):
        self[key] = value

    def save(self):
        fields = []
        params = []
        args = []
        for k, v in self.__mappings__.iteritems():
            fields.append(v.name)
            params.append('?')
            args.append(getattr(self, k, None))
        sql = 'insert into %s (%s) values (%s)' % (self.__table__, ','.join(fields), ','.join(params))
        print('SQL: %s' % sql)
        print('ARGS: %s' % str(args))

# testing code:

class User(Model):
    id = IntegerField('uid')
    name = StringField('username')
    email = StringField('email')
    password = StringField('password')

u = User(id=12345, name='Michael', email='test@orm.org', password='my-pwd')
u.save()


