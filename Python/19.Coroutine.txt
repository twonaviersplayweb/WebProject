A.协程
协程，又称微线程，纤程.英文名Coroutine
子程序，或者称为函数，在所有语言中都是层级调用，比如A调用B，B在执行过程中又调用了C，C执行完毕返回，B执行完毕返回，最后是A执行完毕.
所以子程序调用是通过栈实现的，一个线程就是执行一个子程序.
子程序调用总是一个入口，一次返回，调用顺序是明确的.而协程的调用和子程序不同.
协程看上去也是子程序，但执行过程中，在子程序内部可中断，然后转而执行别的子程序，在适当的时候再返回来接着执行.

协程的特点在于是一个线程执行，那和多线程比，协程有何优势？
最大的优势就是协程极高的执行效率.因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显.
第二大优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多.
因为协程是一个线程执行，那怎么利用多核CPU呢？最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能.

import time 

def consumer():
	r = ''
	while True:
		n = yield r
		if not n :
			return
		print('[CONSUMER] Consuming %s...' % n)
		time.sleep(1)
		r = '200 OK'

def produce(c):
	c.next()
	n = 0
	while n < 5:
		n = n + 1
		print('[PRODUER] Producing %s...' % n)
		r = c.send(n)
		print('[PRODUER] Consumer return: %s' % r)
	c.close()

if __name__ == '__main__':
	c = consumer()
	produce(c)

[SETSUNA@localhost Desktop]$ sudo python app.py
[PRODUER] Producing 1...
[CONSUMER] Consuming 1...
[PRODUER] Consumer return: 200 OK
[PRODUER] Producing 2...
[CONSUMER] Consuming 2...
[PRODUER] Consumer return: 200 OK
[PRODUER] Producing 3...
[CONSUMER] Consuming 3...
[PRODUER] Consumer return: 200 OK
[PRODUER] Producing 4...
[CONSUMER] Consuming 4...
[PRODUER] Consumer return: 200 OK
[PRODUER] Producing 5...
[CONSUMER] Consuming 5...
[PRODUER] Consumer return: 200 OK

consumer函数是一个generator（生成器），把一个consumer传入produce后：
首先调用c.next()启动生成器；
然后，一旦生产了东西，通过c.send(n)切换到consumer执行；
consumer通过yield拿到消息，处理，又通过yield把结果传回；
produce拿到consumer处理的结果，继续生产下一条消息；
produce决定不生产了，通过c.close()关闭consumer，整个过程结束.
整个流程无锁，由一个线程执行，produce和consumer协作完成任务，所以称为“协程”，而非线程的抢占式多任务.

B.gevent
gevent是第三方库，通过greenlet实现协程，其基本思想是：
当一个greenlet遇到IO操作时，比如访问网络，就自动切换到其他的greenlet，等到IO操作完成，再在适当的时候切换回来继续执行。由于IO操作非常耗时，经常使程序处于等待状态，有了gevent为我们自动切换协程，就保证总有greenlet在运行，而不是等待IO。
由于切换是在IO操作时自动完成，所以gevent需要修改Python自带的一些标准库，这一过程在启动时通过monkey patch完成

from gevent import monkey;monkey.patch_socket()
import gevent

def f(n):
	for i in range(n):
		print gevent.getcurrent(), i

g1 = gevent.spawn(f, 5)
g2 = gevent.spawn(f, 5)
g3 = gevent.spawn(f, 5)
g1.join()
g2.join()
g3.join()

[SETSUNA@localhost Desktop]$ python app.py    #三个库依次运行
<Greenlet at 0x7f2a31533af0: f(5)> 0
<Greenlet at 0x7f2a31533af0: f(5)> 1
<Greenlet at 0x7f2a31533af0: f(5)> 2
<Greenlet at 0x7f2a31533af0: f(5)> 3
<Greenlet at 0x7f2a31533af0: f(5)> 4
<Greenlet at 0x7f2a31533e10: f(5)> 0
<Greenlet at 0x7f2a31533e10: f(5)> 1
<Greenlet at 0x7f2a31533e10: f(5)> 2
<Greenlet at 0x7f2a31533e10: f(5)> 3
<Greenlet at 0x7f2a31533e10: f(5)> 4
<Greenlet at 0x7f2a31533a50: f(5)> 0
<Greenlet at 0x7f2a31533a50: f(5)> 1
<Greenlet at 0x7f2a31533a50: f(5)> 2
<Greenlet at 0x7f2a31533a50: f(5)> 3
<Greenlet at 0x7f2a31533a50: f(5)> 4


from gevent import monkey;monkey.patch_socket()
import gevent

def f(n):
	for i in range(n):
		print gevent.getcurrent(), i
		gevent.sleep(0)    #其实就比依次运行多了这句

g1 = gevent.spawn(f, 5)
g2 = gevent.spawn(f, 5)
g3 = gevent.spawn(f, 5)
g1.join()
g2.join()
g3.join()

[SETSUNA@localhost Desktop]$ python app.py    #三个库交替运行
<Greenlet at 0x7f4ae2ef1af0: f(5)> 0
<Greenlet at 0x7f4ae2ef1e10: f(5)> 0
<Greenlet at 0x7f4ae2ef1a50: f(5)> 0
<Greenlet at 0x7f4ae2ef1af0: f(5)> 1
<Greenlet at 0x7f4ae2ef1e10: f(5)> 1
<Greenlet at 0x7f4ae2ef1a50: f(5)> 1
<Greenlet at 0x7f4ae2ef1af0: f(5)> 2
<Greenlet at 0x7f4ae2ef1e10: f(5)> 2
<Greenlet at 0x7f4ae2ef1a50: f(5)> 2
<Greenlet at 0x7f4ae2ef1af0: f(5)> 3
<Greenlet at 0x7f4ae2ef1e10: f(5)> 3
<Greenlet at 0x7f4ae2ef1a50: f(5)> 3
<Greenlet at 0x7f4ae2ef1af0: f(5)> 4
<Greenlet at 0x7f4ae2ef1e10: f(5)> 4
<Greenlet at 0x7f4ae2ef1a50: f(5)> 4


from gevent import monkey;monkey.patch_all()
import gevent
import urllib2

def f(url):
	print('GET: %s' % url)
	resp = urllib2.urlopen(url)
	data = resp.read()
	print('%d bytes received from %s.' % (len(data), url))

gevent.joinall([
	gevent.spawn(f, 'https://www.python.org/'),
	gevent.spawn(f, 'https://www.yahoo.com/'),
	gevent.spawn(f, 'https://github.com/'),
])

[SETSUNA@localhost Desktop]$ sudo python app.py    #3个网络操作是并发执行的，而且结束顺序不同，但只有一个线程
GET: https://www.python.org/
GET: https://www.yahoo.com/
GET: https://github.com/
47067 bytes received from https://www.python.org/.
282652 bytes received from https://www.yahoo.com/.
18189 bytes received from https://github.com/.

