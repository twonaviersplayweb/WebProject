A.正则表达式
1.在正则表达式中，如果直接给出字符，就是精确匹配.用\d可以匹配一个数字，\w可以匹配一个字母或数字，所以：
    '00\d'可以匹配'007'，但无法匹配'00A'；
    '\d\d\d'可以匹配'010'；
    '\w\w\d'可以匹配'py3'；

2. .可以匹配任意字符，所以：

   'py.'可以匹配'pyc'、'pyo'、'py!'等等.

3.要匹配变长的字符，在正则表达式中，用*表示任意个字符（包括0个），用+表示至少一个字符，用?表示0个或1个字符，用{n}表示n个字符，用{n,m}表示n-m个字符
如\d{3}\s+\d{3,8}：
    \d{3}表示匹配3个数字，例如'010'；
    \s可以匹配一个空格（也包括Tab等空白符），所以\s+表示至少有一个空格，例如匹配' '，' '等；
    \d{3,8}表示3-8个数字，例如'1234567'
上面的正则表达式可以匹配以任意个空格隔开的带区号的电话号码

B.进阶
要做更精确地匹配，可以用[]表示范围，比如：
    [0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线；
    [0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'Py3000'等等；
    [a-zA-Z\_][0-9a-zA-Z\_]*可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；
    [a-zA-Z\_][0-9a-zA-Z\_]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）

A|B可以匹配A或B，所以[P|p]ython可以匹配'Python'或者'python'.
^表示行的开头，^\d表示必须以数字开头.
$表示行的结束，\d$表示必须以数字结束.
你可能注意到了，py也可以匹配'python'，但是加上^py$就变成了整行匹配，就只能匹配'py'了

C.re模块
import re
test = raw_input('Please enter sth to use:')
if re.match(r'^\d{3}\-\d{3,8}$', test ):    #使用r前缀，不用考虑转义的问题
	print 'OK'
else:
	print 'Failed'

Please enter sth to use:011-4657984
OK

D.切分字符串
>>> 'a b   c'.split(' ')
['a', 'b', '', '', 'c']
>>> import re
>>> re.split(r'\s+', 'a b   c')
['a', 'b', 'c']
>>> re.split(r'[\s\,]+', 'a,b, c  d')
['a', 'b', 'c', 'd']
>>> re.split(r'[\s\,\;]+', 'a,b;; c  d')
['a', 'b', 'c', 'd']

E.分组
除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用()表示的就是要提取的分组（Group）
>>> import re
>>> m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')    #group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串
>>> m
<_sre.SRE_Match object at 0x7efd54c95250>
>>> m.group(0)
'010-12345'
>>> m.group(1)
'010'
>>> m.group(2)
'12345'

import re
t = '19:05:30'
m = re.match(r'^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$', t)
print m.group()
19：05：30

识别正确日期的正则，对于无效的不适用：'^(0[1-9]|1[0-2]|[0-9])-(0[1-9]|1[0-9]|2[0-9]|3[0-1]|[0-9])$'

F.贪婪匹配
>>> import re
>>> re.match(r'^(\d+)(0*)$', '102300').groups()
('102300', '')
>>> re.match(r'^(\d+?)(0*)$', '102300').groups()    #加个?就可以让\d+采用非贪婪匹配
('1023', '00')

G.编译
import re
re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
print re_telephone.match('010-12345').groups()
print re_telephone.match('010-8086').groups()
('010', '12345')
('010', '8086')


